1
00:00:00,500 --> 00:00:01,888
As before, I'll start off by

2
00:00:01,888 --> 00:00:04,387
writing a function that
operates on a single column,

3
00:00:04,387 --> 00:00:06,790
which I'll call
second_largest_in_column.

4
00:00:06,790 --> 00:00:09,412
Now there are a few different
ways that I could find

5
00:00:09,412 --> 00:00:11,420
the second largest
value in a column.

6
00:00:11,420 --> 00:00:14,011
One way that occurs to me is
I could sort the column in

7
00:00:14,011 --> 00:00:15,037
descending order,

8
00:00:15,037 --> 00:00:17,280
then look at the second
value in the column.

9
00:00:17,280 --> 00:00:20,039
We haven't sorted a panda
series before, so

10
00:00:20,039 --> 00:00:22,950
I'll start by Googling
panda's sort series.

11
00:00:24,180 --> 00:00:27,440
This first link is the pandas
documentation page for

12
00:00:27,440 --> 00:00:29,004
a function called sort.

13
00:00:29,004 --> 00:00:30,555
This looks like what I want,
but

14
00:00:30,555 --> 00:00:33,320
there's a note that this
function has been deprecated.

15
00:00:33,320 --> 00:00:36,389
And instead, I should use
the sort values function with

16
00:00:36,389 --> 00:00:39,370
inplace equals true for
inplace sorting.

17
00:00:39,370 --> 00:00:41,495
I'll click this link
at the bottom to see

18
00:00:41,495 --> 00:00:44,129
the documentation for
the sort values function.

19
00:00:44,129 --> 00:00:46,859
I can see that the inplace
argument affects whether

20
00:00:46,859 --> 00:00:48,764
the series will be
sorted inplace,

21
00:00:48,764 --> 00:00:51,254
the alternative being
to create a new series.

22
00:00:51,254 --> 00:00:54,310
Now, I don't want to modify
the original series.

23
00:00:54,310 --> 00:00:56,480
So I'll use inplace
equals false,

24
00:00:56,480 --> 00:00:59,190
which is the default value for
inplace.

25
00:00:59,190 --> 00:01:01,880
I can also see that there's
a flag called ascending, which

26
00:01:01,880 --> 00:01:04,349
controls whether the series
is sorted in ascending or

27
00:01:04,349 --> 00:01:06,080
descending order.

28
00:01:06,080 --> 00:01:07,520
I'll want to pass false, so

29
00:01:07,520 --> 00:01:10,160
that the series will be
sorted in descending order.

30
00:01:10,160 --> 00:01:13,120
So here, I'm creating
a sorted column by calling

31
00:01:13,120 --> 00:01:16,296
the sort_values function
with ascending=False.

32
00:01:16,296 --> 00:01:19,100
And like I said, I'm using the
default value for in place.

33
00:01:20,130 --> 00:01:22,560
The sorted column will
be a panda's series, so

34
00:01:22,560 --> 00:01:26,210
I can access the second
value using iloc and

35
00:01:26,210 --> 00:01:28,060
the second value will
be at position one.

36
00:01:29,320 --> 00:01:31,590
Now, I'll try calling this
function on one of the columns

37
00:01:31,590 --> 00:01:33,150
in the data frame
to see if it works.

38
00:01:34,760 --> 00:01:36,430
It returned 4,
which is indeed,

39
00:01:36,430 --> 00:01:38,190
the second largest
value in column A.

40
00:01:39,280 --> 00:01:42,141
Now I'm ready to take in
the second_largest function,

41
00:01:42,141 --> 00:01:44,175
which will take in
an entire data frame.

42
00:01:44,175 --> 00:01:46,008
The real work has
been done already and

43
00:01:46,008 --> 00:01:48,815
now I just need to apply
the second_largest_in_column

44
00:01:48,815 --> 00:01:50,310
function, to the data frame.

45
00:01:50,310 --> 00:01:53,019
Finally, I'll call this
function on the test data

46
00:01:53,019 --> 00:01:54,850
frame and
it looks like it worked.

