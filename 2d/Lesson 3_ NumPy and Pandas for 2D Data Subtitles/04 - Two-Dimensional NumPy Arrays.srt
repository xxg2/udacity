1
00:00:00,190 --> 00:00:02,500
Last lesson, you worked a lot
with one-dimensional data.

2
00:00:02,500 --> 00:00:05,689
In this lesson, you're going to
work with two-dimensional data,

3
00:00:05,689 --> 00:00:07,480
data with both rows and columns.

4
00:00:08,790 --> 00:00:11,080
In pure Python without any libraries,

5
00:00:11,080 --> 00:00:13,860
you might represent this
data using a list of lists.

6
00:00:13,860 --> 00:00:17,740
So one list for the first row,
one list for the second row and so

7
00:00:17,740 --> 00:00:19,880
on, and
then put each of those lists on a list.

8
00:00:20,950 --> 00:00:23,740
In NumPy instead of creating
an array of arrays,

9
00:00:23,740 --> 00:00:26,770
you can create a single
two-dimensional array.

10
00:00:26,770 --> 00:00:27,300
In Pandas,

11
00:00:27,300 --> 00:00:30,900
there's a different data structure for
two-dimensional data called a DataFrame.

12
00:00:30,900 --> 00:00:34,250
Just like last lesson, I prefer to
use Pandas since it has additional

13
00:00:34,250 --> 00:00:37,610
functionality, but I'm going to start
with NumPy because it's simpler.

14
00:00:38,700 --> 00:00:41,350
So what's the difference between
making a single two-dimensional

15
00:00:41,350 --> 00:00:44,900
array in NumPy Instead of making
a one-dimensional array whose

16
00:00:44,900 --> 00:00:47,180
elements are also arrays?

17
00:00:47,180 --> 00:00:50,300
One important difference is that
because of how NumPy is implemented,

18
00:00:50,300 --> 00:00:53,320
making a single 2D array
is more memory efficient.

19
00:00:53,320 --> 00:00:57,330
If you'd like to learn more about this,
follow the link in the instructor notes.

20
00:00:57,330 --> 00:01:00,950
The syntax for accessing
elements is also a bit different.

21
00:01:00,950 --> 00:01:05,360
Say you wanted to access the element
at row one and column three.

22
00:01:05,360 --> 00:01:09,265
You would do this using
the code a[1,3] rather than

23
00:01:09,265 --> 00:01:14,580
a[1][3] which is what you would do for
an array of arrays.

24
00:01:14,580 --> 00:01:18,380
You can also make either the row
position, the column position or

25
00:01:18,380 --> 00:01:21,070
both a slice,
rather than a single number

26
00:01:21,070 --> 00:01:24,160
using the colon notation
you learned in last lesson.

27
00:01:24,160 --> 00:01:27,280
Another difference is with the functions
you learned last lesson, mean,

28
00:01:27,280 --> 00:01:29,260
standard deviation, and so on.

29
00:01:29,260 --> 00:01:30,900
With a two dimensional array,

30
00:01:30,900 --> 00:01:33,720
these functions will operate
on the entire array.

31
00:01:33,720 --> 00:01:37,100
So in this case, mean would calculate
the mean of all these values,

32
00:01:37,100 --> 00:01:39,620
ignoring which rows and
columns they were in.

33
00:01:39,620 --> 00:01:41,690
You can't take the mean
of an array of arrays,

34
00:01:41,690 --> 00:01:44,860
although you could take the mean
of each individual row.

35
00:01:44,860 --> 00:01:47,470
On the next screen, you'll get
a chance to play around with using

36
00:01:47,470 --> 00:01:50,270
an umpire array to
represent subway ridership.

37
00:01:50,270 --> 00:01:54,540
Each row will be a different date, and
each column will be a different station.

38
00:01:54,540 --> 00:01:57,350
Try out the example code
given to see what it does.

39
00:01:57,350 --> 00:02:00,870
Then write a function that first finds
the station with the maximum riders on

40
00:02:00,870 --> 00:02:01,430
the first day.

41
00:02:02,440 --> 00:02:06,030
Then find the mean riders per day for
that station.

42
00:02:06,030 --> 00:02:09,590
Also return the mean riders per day
across all stations for comparison.

