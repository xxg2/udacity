1
00:00:00,300 --> 00:00:03,690
So far in this lesson, you've worked
with just one data frame at a time.

2
00:00:03,690 --> 00:00:06,510
However, it's often the case that
you'll have multiple data frames you'd

3
00:00:06,510 --> 00:00:07,910
like to work with.

4
00:00:07,910 --> 00:00:10,890
For example, in Lesson 1,
you had three CSVs.

5
00:00:10,890 --> 00:00:12,340
So if you had been using Pandas,

6
00:00:12,340 --> 00:00:14,950
you would have loaded them
into three data frames.

7
00:00:14,950 --> 00:00:17,750
For example, suppose I wanted
to analyze how likely students

8
00:00:17,750 --> 00:00:20,370
are to cancel once they've
submitted a project.

9
00:00:20,370 --> 00:00:23,560
That would require information from
both the project submissions table and

10
00:00:23,560 --> 00:00:25,200
the enrolments table.

11
00:00:25,200 --> 00:00:29,050
I've only included a few columns from
each table to make the example easier.

12
00:00:29,050 --> 00:00:32,729
Pandas has an operation called merge
that will allow me to combine the two

13
00:00:32,729 --> 00:00:34,740
tables into one table.

14
00:00:34,740 --> 00:00:38,300
This will create a new table with
all the columns from both tables.

15
00:00:38,300 --> 00:00:40,650
Notice that there isn't enrollment
without a corresponding

16
00:00:40,650 --> 00:00:42,100
project submission.

17
00:00:42,100 --> 00:00:45,620
In this example, I'm only interested in
students who didn't submit a project, so

18
00:00:45,620 --> 00:00:47,430
I'm not going to include that row.

19
00:00:47,430 --> 00:00:49,640
You'll see how to do that in a minute.

20
00:00:49,640 --> 00:00:50,520
So in the new table,

21
00:00:50,520 --> 00:00:54,150
there will be one row for
each row in the submissions table.

22
00:00:54,150 --> 00:00:57,100
And the columns corresponding to
the enrollments table will be matched up

23
00:00:57,100 --> 00:00:58,540
by account key.

24
00:00:58,540 --> 00:01:01,270
So the join date for
account key 1 was 5/11.

25
00:01:01,270 --> 00:01:06,760
The join date for
account key 2 was 5/13, and so on.

26
00:01:06,760 --> 00:01:09,670
Note that if there had been a duplicate
entry in the enrollment table, for

27
00:01:09,670 --> 00:01:12,260
example two enrollments for
the account key 2,

28
00:01:12,260 --> 00:01:17,680
then any projects submitted by the
account key 2 would also be duplicated.

29
00:01:17,680 --> 00:01:20,110
So for the same project submission,
there would be one row for

30
00:01:20,110 --> 00:01:22,310
the first enrollment, and
one row for the second enrollment.

31
00:01:23,330 --> 00:01:26,560
For this reason it might be a good idea
to remove duplicates from the enrolments

32
00:01:26,560 --> 00:01:30,630
table before performing the merge,
depending on your use case.

33
00:01:30,630 --> 00:01:34,667
The code I would write to perform this
merge is submissions.merge(enrolments,

34
00:01:34,667 --> 00:01:37,159
on='account_key', how='left').

35
00:01:37,159 --> 00:01:40,830
The on='account_key' specifies how
to match up different rows from

36
00:01:40,830 --> 00:01:42,130
the different tables.

37
00:01:42,130 --> 00:01:45,090
So, in this case they were
matched by account key.

38
00:01:45,090 --> 00:01:47,960
The how=left determines what
happens if some account keys

39
00:01:47,960 --> 00:01:51,680
are present in one table but
not in the other for example this one.

40
00:01:51,680 --> 00:01:56,210
The options for this argument
are inner right left and outer.

41
00:01:56,210 --> 00:01:59,330
And in this case how=inner
would also have worked.

42
00:01:59,330 --> 00:02:03,440
When you use inner, only rows with
an account key present in both tables

43
00:02:03,440 --> 00:02:05,643
are kept, so this row was thrown out.

44
00:02:05,643 --> 00:02:07,037
If how had been equal to right,

45
00:02:07,037 --> 00:02:10,205
then rows from the right hand table
enrollments would have been kept,

46
00:02:10,205 --> 00:02:13,900
even if there was no matching
entry in the submissions table.

47
00:02:13,900 --> 00:02:17,560
Since there's no data for this account
key in the project submissions table,

48
00:02:17,560 --> 00:02:20,140
NaN would have been filled for
those columns.

49
00:02:20,140 --> 00:02:22,480
How equals left does the exact opposite.

50
00:02:22,480 --> 00:02:25,520
If there are rows present in the left
table that are not present in the right

51
00:02:25,520 --> 00:02:27,520
table, it keeps those rows.

52
00:02:27,520 --> 00:02:29,390
In this case there aren't
any rows like that, so

53
00:02:29,390 --> 00:02:31,580
left and inner do the same thing.

54
00:02:31,580 --> 00:02:34,960
If you use outer, then all rows
from both tables are kept and

55
00:02:34,960 --> 00:02:35,980
nans are filled if needed.

56
00:02:36,980 --> 00:02:40,470
I've found that inner is the most common
kind of merge that I like to do, but

57
00:02:40,470 --> 00:02:42,040
it really does depend on the example.

58
00:02:43,060 --> 00:02:44,750
By the way, if you've used SQL,

59
00:02:44,750 --> 00:02:48,950
you may recognize that a merge in Pandas
is very similar to a join in SQL.

60
00:02:48,950 --> 00:02:51,920
If you haven't used sequel though,
don't worry about it.

61
00:02:51,920 --> 00:02:54,030
Now, for the New York dataset,
the subway data,

62
00:02:54,030 --> 00:02:57,950
and for the weather data were originally
gathered from separate sources.

63
00:02:57,950 --> 00:03:01,700
In the following exercise I would
like you to use the merge function

64
00:03:01,700 --> 00:03:04,810
to combine the two files
into a single data frame.

65
00:03:04,810 --> 00:03:07,620
This will put the data in a similar
format that you've been using in

66
00:03:07,620 --> 00:03:08,780
the lesson up until now.

