1
00:00:00,220 --> 00:00:03,860
Once you've created a data frame,
how do you access its elements?

2
00:00:03,860 --> 00:00:06,780
As an example, I'm using the same
ridership data that you looked at

3
00:00:06,780 --> 00:00:09,160
earlier, with station
names as the column names.

4
00:00:10,220 --> 00:00:14,830
I'll also use the index argument
to add dates, as the row indexes.

5
00:00:14,830 --> 00:00:18,250
When I take a look at the data frame,
iPython notebook displays it as a table,

6
00:00:18,250 --> 00:00:20,540
with the appropriate column names and
row indexes.

7
00:00:21,580 --> 00:00:24,200
Accessing a single row of
a data frame is similar to

8
00:00:24,200 --> 00:00:26,128
accessing a single element of a series.

9
00:00:26,128 --> 00:00:30,120
You use .loc to access
rows by their indexes.

10
00:00:30,120 --> 00:00:32,970
So here this code will give me
the second row of the data frame.

11
00:00:34,060 --> 00:00:37,930
Similarly, you can use iloc to
access rows by position, so

12
00:00:37,930 --> 00:00:40,110
this code gives me the last
row of the data frame.

13
00:00:41,180 --> 00:00:44,710
To access a single element,
you can also use loc and iloc, but

14
00:00:44,710 --> 00:00:47,040
this time,
indicating both a row and a column.

15
00:00:48,050 --> 00:00:54,030
For example iloc at 0,
3 gives the element for row 0, column 3.

16
00:00:54,030 --> 00:00:58,390
Similarly, using .loc I can
specify a date and a unit and

17
00:00:58,390 --> 00:01:00,640
get the corresponding value for
that date and unit.

18
00:01:01,860 --> 00:01:04,800
You can also access columns
using square brackets.

19
00:01:04,800 --> 00:01:07,320
So this code gives me
the column just for

20
00:01:07,320 --> 00:01:11,980
unit R006 and you can see
the beginning of that column here.

21
00:01:11,980 --> 00:01:15,030
If this is starting to seem like
a lot to keep track of, don't worry,

22
00:01:15,030 --> 00:01:18,560
it's all in the cheat sheet available
in the downloadable section.

23
00:01:18,560 --> 00:01:23,010
You can also use .values to get a 2D
NumPy array containing only the values

24
00:01:23,010 --> 00:01:26,030
from your data frame,
not the column names or row indexes.

25
00:01:27,040 --> 00:01:30,700
Of course you'll have to be careful
of your data types if you do this.

26
00:01:30,700 --> 00:01:33,550
One reason you might do this is if
you wanted to take the mean of all

27
00:01:33,550 --> 00:01:37,190
the values, rather than the mean
of each row or each column.

28
00:01:37,190 --> 00:01:40,150
That operation isn't supported for
Panda's data frames.

29
00:01:40,150 --> 00:01:44,500
But you could call .mean on
the NumPy array using .values.

30
00:01:44,500 --> 00:01:48,190
On the next screen you'll have a chance
to play around with data frames.

31
00:01:48,190 --> 00:01:51,450
I also want you to get some practice
using data frames by re-writing

32
00:01:51,450 --> 00:01:55,040
one of the functions you wrote earlier,
but this time for data frames.

33
00:01:55,040 --> 00:01:58,580
You could just call .values and
then reuse the code that you wrote for

34
00:01:58,580 --> 00:01:59,826
NumPy arrays.

35
00:01:59,826 --> 00:02:02,980
But I recommend that you figure out
which of the operations you did before

36
00:02:02,980 --> 00:02:06,630
will still work on data frames, and
which you'll have to use .values for.

