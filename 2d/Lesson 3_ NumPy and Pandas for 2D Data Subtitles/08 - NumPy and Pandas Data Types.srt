1
00:00:00,350 --> 00:00:03,872
In the last lesson you saw that num pi
arrays have a d type which is the type

2
00:00:03,872 --> 00:00:05,352
of each element in the array.

3
00:00:05,352 --> 00:00:09,253
For example the d type
of this array is int64.

4
00:00:09,253 --> 00:00:11,360
Int64 means a 64 bit integer.

5
00:00:12,985 --> 00:00:16,024
Now this also applies to
two dimensional arrays.

6
00:00:16,024 --> 00:00:19,341
Each element in the array is
expected to have the same type.

7
00:00:19,341 --> 00:00:23,219
This can make it inconvenient to
use unconventional num pi arrays to

8
00:00:23,219 --> 00:00:25,405
represent the contents of a CSV file.

9
00:00:25,405 --> 00:00:29,282
For example, suppose I tried to create
a num pi array to represent the student

10
00:00:29,282 --> 00:00:31,565
enrollment data from lesson one?

11
00:00:31,565 --> 00:00:34,530
I've recreated a small
piece of that data here.

12
00:00:34,530 --> 00:00:37,300
Even though when I created the array,
I entered integers and

13
00:00:37,300 --> 00:00:41,650
volumes without quotes, each element
has been converted to a string.

14
00:00:41,650 --> 00:00:46,330
The dtype is also s14,
meaning strings of length at most 14.

15
00:00:46,330 --> 00:00:51,170
Obviously it doesn't make sense to take
the mean of strings, such as cancelled,

16
00:00:51,170 --> 00:00:55,300
but it would make sense to take the mean
of just the days_to_cancel column.

17
00:00:55,300 --> 00:00:58,910
The days_to_cancel column is column
three, so I can access it like this.

18
00:01:00,260 --> 00:01:04,828
However, if I take the mean of
this column, then it doesn't work.

19
00:01:04,828 --> 00:01:09,320
Instead, num pi says that it cannot
perform the reduce with a flexible type,

20
00:01:09,320 --> 00:01:12,230
which means that it doesn't know how
to take the mean when not all of

21
00:01:12,230 --> 00:01:14,070
the values are numbers.

22
00:01:14,070 --> 00:01:18,630
That's one benefit of Panda's dataframes
over two dimensional num pi arrays.

23
00:01:18,630 --> 00:01:21,710
A dataframe is also a two
dimensional data structure, but

24
00:01:21,710 --> 00:01:23,870
each column is assumed
to be a different type.

25
00:01:24,870 --> 00:01:29,030
Another benefit is that dataframes have
indexes similar to Panda's theories.

26
00:01:29,030 --> 00:01:32,050
There is an index value for
each row, and a name for column.

27
00:01:33,350 --> 00:01:36,990
So instead, I'll create
a Pandas DataFrame from this data.

28
00:01:36,990 --> 00:01:40,150
I can do that by passing in
a dictionary mapping column names

29
00:01:40,150 --> 00:01:42,710
to lists of values for that column.

30
00:01:42,710 --> 00:01:46,450
So, one key in the dictionary
would be account_key, and

31
00:01:46,450 --> 00:01:50,160
the list would be all of the values for
the account_key column.

32
00:01:50,160 --> 00:01:52,740
And similarly for the other columns.

33
00:01:52,740 --> 00:01:56,390
Now when I take a look at the data
frame, it's displayed in a nice table.

34
00:01:56,390 --> 00:01:58,191
The column names are at the top and

35
00:01:58,191 --> 00:02:00,870
the role indexes are integers
starting at zero.

36
00:02:00,870 --> 00:02:03,740
There are some other ways to
creat Pandas data frames as well,

37
00:02:03,740 --> 00:02:04,940
which you'll take a look at soon.

38
00:02:06,100 --> 00:02:08,000
Now if I take the mean
of the data frame,

39
00:02:08,000 --> 00:02:11,610
it takes the mean of each numerical
column and ignores the others.

40
00:02:11,610 --> 00:02:15,690
It's udacity is a numerical column
here with trues treated as one and

41
00:02:15,690 --> 00:02:17,980
falses treated as zero.

42
00:02:17,980 --> 00:02:21,680
You'll notice that Pandas did not take
the mean of the entire data frame here,

43
00:02:21,680 --> 00:02:23,430
but of each column.

44
00:02:23,430 --> 00:02:26,240
Since each column is assumed
to be a different type,

45
00:02:26,240 --> 00:02:28,760
this makes more sense for Pandas.

46
00:02:28,760 --> 00:02:32,680
You can also use the axis argument to
take the mean of each row instead,

47
00:02:32,680 --> 00:02:34,240
although that won't work in this case,

48
00:02:34,240 --> 00:02:36,760
since each row contains
some non-numerical data.

