1
00:00:00,500 --> 00:00:03,060
A lot of the questions I have
about the subway data set have

2
00:00:03,060 --> 00:00:04,470
something in common.

3
00:00:04,470 --> 00:00:08,590
For example, I'd like to look at how
ridership varies by hour of the day.

4
00:00:08,590 --> 00:00:11,060
But the file contains many entries for

5
00:00:11,060 --> 00:00:14,890
each hour of the day from different
days and different stations.

6
00:00:14,890 --> 00:00:19,560
So first, I'll need to separate the data
into one group for each hour of the day,

7
00:00:19,560 --> 00:00:25,040
then take the average ridership for each
hour, then I can analyze these numbers.

8
00:00:25,040 --> 00:00:29,000
Similarly, I want to look at whether
rain affects subway ridership.

9
00:00:29,000 --> 00:00:31,690
One possibility would be to
break the data into two groups,

10
00:00:31,690 --> 00:00:34,420
data when it is raining and
data when it is not raining,

11
00:00:34,420 --> 00:00:36,995
then I would compare ridership
between the two groups.

12
00:00:36,995 --> 00:00:40,215
Again, there's a grouping step
followed by an aggregation step

13
00:00:40,215 --> 00:00:42,925
where I sum up all the entries
within each group or

14
00:00:42,925 --> 00:00:44,895
take the average of
the entries within each group.

15
00:00:46,035 --> 00:00:48,705
I also said I was interested in
how the ridership varies by day of

16
00:00:48,705 --> 00:00:49,655
the week where again,

17
00:00:49,655 --> 00:00:53,225
I would need to group by the day of
the week then aggregate for each day.

18
00:00:53,225 --> 00:00:56,335
This might remind you of the code for
lesson one where you grouped

19
00:00:56,335 --> 00:01:00,155
data by account key and then added up
engagement records for each account key.

20
00:01:01,400 --> 00:01:04,715
In lesson one, I chose to accomplish
the first step with a function name

21
00:01:04,715 --> 00:01:09,800
group_data, and the second step with
a function named sum_grouped_items.

22
00:01:09,800 --> 00:01:13,610
Pandas has similar built in functions
allowing this type of analysis to be

23
00:01:13,610 --> 00:01:15,630
done with much less code.

24
00:01:15,630 --> 00:01:17,710
Let's take a look at a concrete example,

25
00:01:17,710 --> 00:01:21,860
suppose that I had the engagement data
for each student in a Pandas data frame.

26
00:01:21,860 --> 00:01:24,913
I've created a small data frame
here to use as an example.

27
00:01:24,913 --> 00:01:27,730
Then the code I would write to get
the average number of minutes spent in

28
00:01:27,730 --> 00:01:30,413
the classroom would be
engagement_df.groupyby

29
00:01:30,413 --> 00:01:35,000
('account_key').sum()['total_minutes_vi-
sited'].mean( ).

30
00:01:35,000 --> 00:01:37,918
Now let's go through what each piece
of this code does one bit at a time.

31
00:01:37,918 --> 00:01:41,610
First, calling
engagement_df.groupby('account_key')

32
00:01:41,610 --> 00:01:46,090
creates a special type of object
called a DataFrameGroupBy object.

33
00:01:46,090 --> 00:01:49,500
I think of it as being a dictionary
mapping each account key to a smaller

34
00:01:49,500 --> 00:01:52,830
data frame containing only the rows
that match that account key.

35
00:01:52,830 --> 00:01:56,760
Although, it's actually this custom
object rather than a dictionary.

36
00:01:56,760 --> 00:02:00,720
If you want to, you can get a look at
the mapping using the .groups attribute.

37
00:02:00,720 --> 00:02:05,140
This shows that the account key 1175
corresponds to rows 7 through 13 of

38
00:02:05,140 --> 00:02:07,150
the original data frame.

39
00:02:07,150 --> 00:02:10,320
And the account key 1200
corresponds to rows 0 through 6.

40
00:02:10,320 --> 00:02:15,700
It's not usually necessary to directly
examine the underlying groups like this,

41
00:02:15,700 --> 00:02:19,120
but sometimes, it can be useful to
get a sense of what's going on.

42
00:02:19,120 --> 00:02:22,190
Next, I'll use the .sum
function on the group by object

43
00:02:22,190 --> 00:02:24,950
to add up each column within each group.

44
00:02:24,950 --> 00:02:28,720
You can see that this calculated
that the total minutes visited for

45
00:02:28,720 --> 00:02:30,830
the account key 1175 was 2.7.

46
00:02:30,830 --> 00:02:35,001
And the total for
the account key 1200 was 696.6.

47
00:02:35,001 --> 00:02:38,276
Note that the date column is not
included in this output because it's not

48
00:02:38,276 --> 00:02:40,700
possible to take the sum
of a bunch of dates.

49
00:02:40,700 --> 00:02:43,120
But if there were other numerical
columns in the data frame,

50
00:02:43,120 --> 00:02:44,290
they would be included here.

51
00:02:45,530 --> 00:02:49,910
Now when I add at total_minutes_visited,
I get the same data back but this time,

52
00:02:49,910 --> 00:02:51,860
it's in a Panda series.

53
00:02:51,860 --> 00:02:55,180
Notice that before, this was in
a data frame with only one column,

54
00:02:55,180 --> 00:02:58,930
which you can tell because it renders
as a table in the IPython Notebook.

55
00:02:58,930 --> 00:03:02,362
Again, if there were more numerical
columns, they would show up in this data

56
00:03:02,362 --> 00:03:06,280
frame, but this series will contain
only the total minutes visited column.

57
00:03:06,280 --> 00:03:10,584
And now, since I want to take the
average across all students I add .mean.

58
00:03:10,584 --> 00:03:15,570
And that gives me a single number, about
350 minutes for these two students.

59
00:03:15,570 --> 00:03:19,050
Or perhaps even better,
I could use the describe function.

60
00:03:19,050 --> 00:03:21,400
And then I'll get a bunch of
metrics including the mean,

61
00:03:21,400 --> 00:03:24,770
standard deviation,
minimum, and maximum.

62
00:03:24,770 --> 00:03:28,190
Now, the piece of this code that I found
most confusing when I first learned

63
00:03:28,190 --> 00:03:31,190
about groupby was the sum function.

64
00:03:31,190 --> 00:03:34,820
You've seen the sum function before but
that was for data frames.

65
00:03:34,820 --> 00:03:36,670
This is a groupby object.

66
00:03:36,670 --> 00:03:40,440
So, I wondered, what other functions
do groupby objects have available.

67
00:03:40,440 --> 00:03:43,030
What if there is no function
that does what you want?

68
00:03:43,030 --> 00:03:44,520
Well, similarly to series and

69
00:03:44,520 --> 00:03:48,690
data frames, groupby objects have a lot
of convenient functions built in and

70
00:03:48,690 --> 00:03:52,520
if the one you want isn't built in,
you can use apply and write your own.

71
00:03:52,520 --> 00:03:53,810
In the following exercise,

72
00:03:53,810 --> 00:03:56,790
I'd like you to group the subway
data by a variable of your choice,

73
00:03:56,790 --> 00:04:00,600
maybe day of the week, hour of the day,
or whether it was raining.

74
00:04:00,600 --> 00:04:04,110
Then find the mean subway ridership for
each different value, and

75
00:04:04,110 --> 00:04:06,020
either produce a plot
showing the results, or

76
00:04:06,020 --> 00:04:08,260
simply print out the numbers
if that makes more sense.

